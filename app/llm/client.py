import httpx
import asyncio
from typing import Dict, Any, Optional
from loguru import logger
from ..config import config


class LLMClient:
    """–ö–ª–∏–µ–Ω—Ç –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å OpenAI API"""
    
    def __init__(self):
        self.api_key = config.openai_api_key
        self.base_url = config.llm_base_url
        self.model_text = config.llm_model_text
        self.model_vision = config.llm_model_vision
        
    async def solve_text(self, text: str, subject_hint: str = None, 
                        conversation_context: list = None) -> Dict[str, Any]:
        """–†–µ—à–∞–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤—É—é –∑–∞–¥–∞—á—É —Å —É—á–µ—Ç–æ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞"""
        if self.api_key == "demo_key":
            return {
                "subject": subject_hint or "–º–∞—Ç–µ–º–∞—Ç–∏–∫–∞",
                "response": "–≠—Ç–æ –¥–µ–º–æ-—Ä–µ–∂–∏–º. –î–ª—è –ø–æ–ª–Ω–æ–≥–æ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–∞ –Ω–∞—Å—Ç—Ä–æ–π—Ç–µ OpenAI API –∫–ª—é—á."
            }
        
        try:
            system_prompt = self._get_system_prompt(subject_hint)
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º
            messages = [{"role": "system", "content": system_prompt}]
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–∏–∞–ª–æ–≥–∞ (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 5 —Å–æ–æ–±—â–µ–Ω–∏–π)
            if conversation_context:
                for msg in conversation_context[-5:]:  # –ë–µ—Ä–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 5 —Å–æ–æ–±—â–µ–Ω–∏–π
                    messages.append({
                        "role": msg["role"],
                        "content": msg["content"]
                    })
            
            # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â–∏–π –∑–∞–ø—Ä–æ—Å
            messages.append({"role": "user", "content": text})
            
            async with httpx.AsyncClient(timeout=30.0) as client:
                response = await client.post(
                    f"{self.base_url}/chat/completions",
                    headers={
                        "Authorization": f"Bearer {self.api_key}",
                        "Content-Type": "application/json"
                    },
                    json={
                        "model": self.model_text,
                        "messages": messages,
                        "temperature": 0.1,
                        "max_tokens": 2000
                    }
                )
                
                if response.status_code != 200:
                    logger.error(f"OpenAI API error: {response.status_code} - {response.text}")
                    return self._get_error_response()
                
                result = response.json()
                content = result["choices"][0]["message"]["content"]
                
                return self._parse_response(content, subject_hint)
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ OpenAI API: {e}")
            return self._get_error_response()
    
    async def solve_image(self, image_bytes: bytes, subject_hint: str = None,
                         conversation_context: list = None) -> Dict[str, Any]:
        """–†–µ—à–∞–µ—Ç –∑–∞–¥–∞—á—É –ø–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é —Å —É—á–µ—Ç–æ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞"""
        if self.api_key == "demo_key":
            return {
                "subject": subject_hint or "–º–∞—Ç–µ–º–∞—Ç–∏–∫–∞", 
                "response": "–≠—Ç–æ –¥–µ–º–æ-—Ä–µ–∂–∏–º. –î–ª—è –ø–æ–ª–Ω–æ–≥–æ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–∞ –Ω–∞—Å—Ç—Ä–æ–π—Ç–µ OpenAI API –∫–ª—é—á."
            }
        
        try:
            import base64
            image_base64 = base64.b64encode(image_bytes).decode('utf-8')
            
            system_prompt = self._get_system_prompt(subject_hint)
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º
            messages = [{"role": "system", "content": system_prompt}]
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–∏–∞–ª–æ–≥–∞ (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 3 —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π)
            if conversation_context:
                for msg in conversation_context[-3:]:  # –ú–µ–Ω—å—à–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
                    messages.append({
                        "role": msg["role"],
                        "content": msg["content"]
                    })
            
            # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â–∏–π –∑–∞–ø—Ä–æ—Å —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º
            messages.append({
                "role": "user",
                "content": [
                    {"type": "text", "text": "–†–µ—à–∏ –∑–∞–¥–∞—á—É –Ω–∞ —ç—Ç–æ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏:"},
                    {
                        "type": "image_url",
                        "image_url": {
                            "url": f"data:image/jpeg;base64,{image_base64}"
                        }
                    }
                ]
            })
            
            async with httpx.AsyncClient(timeout=30.0) as client:
                response = await client.post(
                    f"{self.base_url}/chat/completions",
                    headers={
                        "Authorization": f"Bearer {self.api_key}",
                        "Content-Type": "application/json"
                    },
                    json={
                        "model": self.model_vision,
                        "messages": messages,
                        "temperature": 0.1,
                        "max_tokens": 2000
                    }
                )
                
                if response.status_code != 200:
                    logger.error(f"OpenAI API error: {response.status_code} - {response.text}")
                    return self._get_error_response()
                
                result = response.json()
                content = result["choices"][0]["message"]["content"]
                
                return self._parse_response(content, subject_hint)
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ OpenAI Vision API: {e}")
            return self._get_error_response()
    
    def _get_system_prompt(self, subject_hint: str = None) -> str:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —É–ª—É—á—à–µ–Ω–Ω—ã–π —Å–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç"""
        return """

        –¢—ã ‚Äî –£—á–µ–±–Ω—ã–π –ù–∞—Å—Ç–∞–≤–Ω–∏–∫, —ç–∫—Å–ø–µ—Ä—Ç –ø–æ —Ä–µ—à–µ–Ω–∏—é —à–∫–æ–ª—å–Ω—ã—Ö –∏ —Å—Ç—É–¥–µ–Ω—á–µ—Å–∫–∏—Ö –∑–∞–¥–∞—á –ø–æ –≤—Å–µ–º –ø—Ä–µ–¥–º–µ—Ç–∞–º.

–¢–≤–æ—è –∑–∞–¥–∞—á–∞ ‚Äî –Ω–µ –ø—Ä–æ—Å—Ç–æ –¥–∞—Ç—å –æ—Ç–≤–µ—Ç, –∞ –Ω–∞—É—á–∏—Ç—å: –æ–±—ä—è—Å–Ω–∏ —à–∞–≥ –∑–∞ —à–∞–≥–æ–º, —á—Ç–æ –∏ –ø–æ—á–µ–º—É —Ç—ã –¥–µ–ª–∞–µ—à—å, –∫–∞–∫ –±—É–¥—Ç–æ —Ç—ã —Ö–æ—Ä–æ—à–∏–π —Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä, –∫–æ—Ç–æ—Ä—ã–π —Å–∏–¥–∏—Ç —Ä—è–¥–æ–º.

üìå –§–û–†–ú–ê–¢ –û–¢–í–ï–¢–ê:
1. –†–∞—Å–ø–æ–∑–Ω–∞–π –ø—Ä–µ–¥–º–µ—Ç –ø–æ –∑–∞–¥–∞—á–µ (–º–∞—Ç–µ–º–∞—Ç–∏–∫–∞, —Ñ–∏–∑–∏–∫–∞, —Ö–∏–º–∏—è, –∏—Å—Ç–æ—Ä–∏—è, —Ä—É—Å—Å–∫–∏–π –∏ —Ç.–¥.)
2. –î–∞–π –∫—Ä–∞—Ç–∫–æ–µ –≤—Å—Ç—É–ø–ª–µ–Ω–∏–µ: —á—Ç–æ –Ω—É–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å –∏ –∫–∞–∫–∞—è —ç—Ç–æ —Ç–µ–º–∞
3. –†–µ—à–∞–π –ø–æ —à–∞–≥–∞–º, –∫–∞–∂–¥—ã–π —à–∞–≥ —Å –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ–º
4. –§–æ—Ä–º—É–ª—ã –∏ –æ–±–æ–∑–Ω–∞—á–µ–Ω–∏—è ‚Äî —Ç–æ–ª—å–∫–æ –≤ –≤–∏–¥–µ **Unicode-—Å–∏–º–≤–æ–ª–æ–≤**, —á—Ç–æ–±—ã —Ç–µ–∫—Å—Ç –∫—Ä–∞—Å–∏–≤–æ –æ—Ç–æ–±—Ä–∞–∂–∞–ª—Å—è –Ω–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞—Ö. –ü—Ä–∏–º–µ—Ä—ã:  
   ‚Ä¢ –°—Ç–µ–ø–µ–Ω–∏: x¬≤, x¬≥, x‚Åª¬≤  
   ‚Ä¢ –ò–Ω–¥–µ–∫—Å—ã: H‚ÇÇO, CO‚ÇÇ, x‚ÇÅ, v‚ÇÄ  
   ‚Ä¢ –ö–æ—Ä–Ω–∏: ‚àöx, ‚àö(a¬≤ + b¬≤), ¬≥‚àöx  
   ‚Ä¢ –ì—Ä–µ—á–µ—Å–∫–∏–µ –±—É–∫–≤—ã: Œ±, Œ≤, Œî, Œ∏  
   ‚Ä¢ –§—É–Ω–∫—Ü–∏–∏: sin(Œ±), cos(Œ∏), log(x), ‚àë, ‚à´  
   ‚Ä¢ –°—Ç—Ä–µ–ª–∫–∏ –∏ –∑–Ω–∞–∫–∏: ‚Üí, ‚áå, ‚â†, ‚â•, ‚â§, ¬±  
5. –í –∫–æ–Ω—Ü–µ –≤—ã–¥–∞–π:
   üîé ¬´**–ö–∞–∫ —Å–µ–±—è –ø—Ä–æ–≤–µ—Ä–∏—Ç—å?**¬ª ‚Äî –Ω–∞–ø–∏—à–∏, –≥–¥–µ —á–∞—â–µ –≤—Å–µ–≥–æ –æ—à–∏–±–∞—é—Ç—Å—è, —á—Ç–æ –≤–∞–∂–Ω–æ –∑–∞–ø–æ–º–Ω–∏—Ç—å, –∏ –ø—Ä–µ–¥–ª–æ–∂–∏ –ø–æ–¥–æ–±–Ω—É—é –∑–∞–¥–∞—á—É –¥–ª—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏

üéì –ü–†–ê–í–ò–õ–ê:
- –û–±—ä—è—Å–Ω—è–π –∫–∞–∫ —Ö–æ—Ä–æ—à–µ–º—É –¥—Ä—É–≥—É, –Ω–µ —Å—É—Ö–æ
- –ù–µ –∏—Å–ø–æ–ª—å–∑—É–π LaTeX, Markdown –∏–ª–∏ –∫–æ–¥-–±–ª–æ–∫–∏
- –í—Å–µ —Å–∏–º–≤–æ–ª—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –≤–∏–¥–Ω—ã –∫–∞–∫ –æ–±—ã—á–Ω—ã–π —Ç–µ–∫—Å—Ç (Unicode)
- –ù–µ –ø–∏—à–∏ –ø—Ä–æ—Å—Ç–æ –æ—Ç–≤–µ—Ç ‚Äî –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –æ–±—ä—è—Å–Ω–∏ –ø—É—Ç—å
- –ù–µ –¥–æ–±–∞–≤–ª—è–π –æ—Ç —Å–µ–±—è –ª–∏—à–Ω—é—é –≤–æ–¥—É

üß† –ü—Ä–∏–º–µ—Ä —Å—Ç–∏–ª—è:
‚Äì ¬´–°–Ω–∞—á–∞–ª–∞ –Ω–∞–π–¥–µ–º, —á—Ç–æ –∏–∑–≤–µ—Å—Ç–Ω–æ –∏–∑ —É—Å–ª–æ–≤–∏—è. –ù–∞–º –¥–∞–Ω—ã x –∏ y, –Ω—É–∂–Ω–æ –Ω–∞–π—Ç–∏ —Å–∫–æ—Ä–æ—Å—Ç—å. –≠—Ç–æ –∑–∞–¥–∞—á–∞ –Ω–∞ –¥–≤–∏–∂–µ–Ω–∏–µ ‚Üí –ø–æ–¥–æ–π–¥—ë—Ç —Ñ–æ—Ä–º—É–ª–∞ v = s / t‚Ä¶¬ª

‚Äì ¬´–í–æ—Ç –≥–¥–µ —á–∞—Å—Ç–æ –æ—à–∏–±–∞—é—Ç—Å—è: –ø—É—Ç–∞—é—Ç –º–∞—Å—Å—É —Å –≤–µ—Å–æ–º. –ù–∞–ø–æ–º–∏–Ω–∞—é, –≤–µ—Å ‚Äî —ç—Ç–æ —Å–∏–ª–∞: P = mg¬ª

–û—Ç–≤–µ—á–∞–π —Å—Ç—Ä–æ–≥–æ –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ, –∫–∞–∫ —É–º–Ω—ã–π, —Ç–µ—Ä–ø–µ–ª–∏–≤—ã–π –Ω–∞—Å—Ç–∞–≤–Ω–∏–∫.

–§–û–†–ú–ê–¢–ò–†–û–í–ê–ù–ò–ï (–∏—Å–ø–æ–ª—å–∑—É–π Unicode —Å–∏–º–≤–æ–ª—ã):
- –°—Ç–µ–ø–µ–Ω–∏: x¬≤, x¬≥, x‚Å¥, x‚Åø, x‚Åª¬π, x‚Åª¬≤
- –ò–Ω–¥–µ–∫—Å—ã: x‚ÇÅ, x‚ÇÇ, x‚ÇÉ, v‚ÇÄ, h‚Çò‚Çê‚Çì, t‚ÇÄ
- –î—Ä–æ–±–∏: ¬Ω, ‚Öì, ¬º, ¬æ, ‚Öî, ‚Öõ
- –ö–æ—Ä–Ω–∏: ‚àöx, ¬≥‚àöx, ‚Å¥‚àöx, ‚àö(a+b)
- –ì—Ä–µ—á–µ—Å–∫–∏–µ –±—É–∫–≤—ã: Œ±, Œ≤, Œ≥, Œ¥, Œµ, Œ∏, Œª, Œº, œÄ, œÅ, œÉ, œÑ, œÜ, œá, œà, œâ
- –§—É–Ω–∫—Ü–∏–∏: sin(Œ±), cos(Œ≤), tan(Œ∏), ln(x), log(x), ‚à´, ‚àë, ‚àè
- –•–∏–º–∏—è: H‚ÇÇO, CO‚ÇÇ, SO‚ÇÑ¬≤‚Åª, NH‚ÇÑ‚Å∫, Ca¬≤‚Å∫, Cl‚Åª, Fe‚ÇÉO‚ÇÑ
- –ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞: ¬±, ‚â†, ‚â§, ‚â•, ‚âà, ‚àû, ‚àÜ, ‚àá, ‚àÇ, ‚à´, ‚àë, ‚àè, ‚àà, ‚àâ, ‚à™, ‚à©
- –°—Ç—Ä–µ–ª–∫–∏: ‚Üí, ‚Üê, ‚Üë, ‚Üì, ‚Üî, ‚áå, ‚áí, ‚áî

–í–ê–ñ–ù–û: 
- –ò—Å–ø–æ–ª—å–∑—É–π –¢–û–õ–¨–ö–û Unicode —Å–∏–º–≤–æ–ª—ã –¥–ª—è —Ñ–æ—Ä–º—É–ª
- –ù–ï –∏—Å–ø–æ–ª—å–∑—É–π LaTeX –±–ª–æ–∫–∏ \( \) –∏–ª–∏ \[ \]
- –ù–ï –∏—Å–ø–æ–ª—å–∑—É–π ** –¥–ª—è –≤—ã–¥–µ–ª–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞
- –í—Å–µ —Å–∏–º–≤–æ–ª—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –≤–∏–¥–Ω—ã –ø—Ä—è–º–æ –≤ —Ç–µ–∫—Å—Ç–µ
- –û—Ç–≤–µ—á–∞–π –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ
- –†–µ—à–∞–π –ø–æ—à–∞–≥–æ–≤–æ —Å –æ–±—ä—è—Å–Ω–µ–Ω–∏—è–º–∏"""
    
    def _parse_response(self, content: str, subject_hint: str = None) -> Dict[str, Any]:
        """–ü—Ä–æ—Å—Ç–æ–π –ø–∞—Ä—Å–∏–Ω–≥ - –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—Ç–≤–µ—Ç –∫–∞–∫ –µ—Å—Ç—å"""
        return {
            "subject": subject_hint or "–º–∞—Ç–µ–º–∞—Ç–∏–∫–∞",
            "response": content
        }
    
    def _get_error_response(self) -> Dict[str, Any]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ—Ç–≤–µ—Ç –ø—Ä–∏ –æ—à–∏–±–∫–µ"""
        return {
            "subject": "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ",
            "response": "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑."
        }


# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –∫–ª–∏–µ–Ω—Ç–∞
llm_client = LLMClient()
