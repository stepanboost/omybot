from aiogram import Router, F
from aiogram.types import Message, ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery
from aiogram.filters import Command
from loguru import logger
from ..config import config
from ..llm.client import llm_client
from ..utils.subjects import detect_subject, get_subject_emoji
from ..db.repo import db_repo

router = Router()


WELCOME_KEYBOARD = ReplyKeyboardMarkup(
    keyboard=[
        [
            KeyboardButton(text="üìù –†–µ—à–∏—Ç—å —Ç–µ–∫—Å—Ç–æ–º"),
            KeyboardButton(text="üì∏ –†–µ—à–∏—Ç—å –ø–æ —Ñ–æ—Ç–æ"),
        ]
    ],
    resize_keyboard=True,
    input_field_placeholder="–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∑–∞–¥–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–æ–º/—Ñ–æ—Ç–æ",
)


def build_subscription_keyboard() -> InlineKeyboardMarkup:
    pay_url = config.subscription_pay_url.strip()
    buttons = []
    if pay_url:
        buttons.append([InlineKeyboardButton(text="–û–ø–ª–∞—Ç–∏—Ç—å 299 ‚ÇΩ", url=pay_url)])
    buttons.append([InlineKeyboardButton(text="–ü–æ–∫–∞ –±–µ–∑ –ø–æ–¥–ø–∏—Å–∫–∏", callback_data="sub_skip")])
    return InlineKeyboardMarkup(inline_keyboard=buttons)


@router.message(Command("start"))
async def cmd_start(message: Message):
    """–ö–æ—Ä–æ—Ç–∫–æ–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ + inline-–∫–Ω–æ–ø–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏ + –æ—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é."""
    user_id = message.from_user.id
    first_name = message.from_user.first_name or ""
    username = message.from_user.username
    last_name = message.from_user.last_name

    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∑–∞–ø—É—Å—Ç–∏–ª –±–æ—Ç–∞")
    
    # –°–æ–∑–¥–∞–µ–º –∏–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    try:
        await db_repo.create_user(user_id, username, first_name, last_name)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")

    welcome_text = (
        f"–ü—Ä–∏–≤–µ—Ç, {first_name}!\n\n"
        "–Ø –ø–æ–º–æ–≥—É —Ä–µ—à–∏—Ç—å —à–∫–æ–ª—å–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è –ø–æ –≤—Å–µ–º –ø—Ä–µ–¥–º–µ—Ç–∞–º.\n\n"
        "–ß—Ç–æ —è —É–º–µ—é:\n"
        "‚Ä¢ –ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞ ‚Äî –∞–ª–≥–µ–±—Ä–∞, –≥–µ–æ–º–µ—Ç—Ä–∏—è, —Ç—Ä–∏–≥–æ–Ω–æ–º–µ—Ç—Ä–∏—è\n"
        "‚Ä¢ –§–∏–∑–∏–∫–∞ ‚Äî –º–µ—Ö–∞–Ω–∏–∫–∞, —ç–ª–µ–∫—Ç—Ä–∏—á–µ—Å—Ç–≤–æ, –æ–ø—Ç–∏–∫–∞\n"
        "‚Ä¢ –•–∏–º–∏—è ‚Äî —É—Ä–∞–≤–Ω–µ–Ω–∏—è, —Ä–µ–∞–∫—Ü–∏–∏, —Ä–∞—Å—á—ë—Ç—ã\n"
        "‚Ä¢ –†—É—Å—Å–∫–∏–π —è–∑—ã–∫, –ª–∏—Ç–µ—Ä–∞—Ç—É—Ä–∞, –∏—Å—Ç–æ—Ä–∏—è\n"
        "‚Ä¢ –ê–Ω–≥–ª–∏–π—Å–∫–∏–π —è–∑—ã–∫, –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–∫–∞, –±–∏–æ–ª–æ–≥–∏—è\n\n"
        "–ö–∞–∫ —ç—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç:\n"
        "1. –û—Ç–ø—Ä–∞–≤—å –∑–∞–¥–∞—á—É —Ç–µ–∫—Å—Ç–æ–º –∏–ª–∏ —Ñ–æ—Ç–æ\n"
        "2. –ü–æ–ª—É—á–∏ —Ä–µ—à–µ–Ω–∏–µ —Å –æ–±—ä—è—Å–Ω–µ–Ω–∏—è–º–∏\n"
        "3. –ò–∑—É—á–∏ —Ñ–æ—Ä–º—É–ª—ã –∏ –ø—Ä–æ–≤–µ—Ä—å –∑–Ω–∞–Ω–∏—è\n\n"
        "–í—ã–±–µ—Ä–∏ —Ä–µ–∂–∏–º:"
    )

    await message.answer(welcome_text, reply_markup=WELCOME_KEYBOARD)

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –±–ª–æ–∫ —Å –ø–æ–¥–ø–∏—Å–∫–æ–π –æ—Ç–¥–µ–ª—å–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º, —á—Ç–æ–±—ã inline-–∫–Ω–æ–ø–∫–∏ –±—ã–ª–∏ —Å—Ä–∞–∑—É
    sub_text = (
        "–î–æ—Å—Ç—É–ø–Ω–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –∑–∞ 299 ‚ÇΩ –≤ –º–µ—Å—è—Ü:\n"
        "‚Ä¢ –ë—ã—Å—Ç—Ä—ã–µ –æ—Ç–≤–µ—Ç—ã\n"
        "‚Ä¢ –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ –æ–±—ä—è—Å–Ω–µ–Ω–∏—è\n"
        "‚Ä¢ –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞\n\n"
        "–ú–æ–∂–Ω–æ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∏ –±–µ–∑ –ø–æ–¥–ø–∏—Å–∫–∏."
    )
    await message.answer(sub_text, reply_markup=build_subscription_keyboard())


@router.callback_query(F.data == "sub_skip")
async def subscription_skip(callback: CallbackQuery):
    await callback.answer("–ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –±–µ–∑ –ø–æ–¥–ø–∏—Å–∫–∏", show_alert=False)
    try:
        await callback.message.edit_reply_markup(reply_markup=None)
    except Exception as e:
        logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–±—Ä–∞—Ç—å inline-–∫–Ω–æ–ø–∫–∏: {e}")
    
    await callback.message.answer(
        "–û–∫–µ–π! –í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º –Ω–∏–∂–µ –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∑–∞–¥–∞–Ω–∏–µ.",
        reply_markup=WELCOME_KEYBOARD,
    )


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤—Å–µ—Ö –æ—Å—Ç–∞–ª—å–Ω—ã—Ö callback-–∑–∞–ø—Ä–æ—Å–æ–≤
@router.callback_query()
async def handle_unknown_callback(callback: CallbackQuery):
    await callback.answer("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞", show_alert=False)


@router.message(F.text == "üìù –†–µ—à–∏—Ç—å —Ç–µ–∫—Å—Ç–æ–º")
async def handle_choose_text(message: Message):
    await message.answer(
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç –∑–∞–¥–∞–Ω–∏—è –æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º.\n\n"
        "–ù–∞–ø—Ä–∏–º–µ—Ä: \"–†–µ—à–∏ —É—Ä–∞–≤–Ω–µ–Ω–∏–µ: 3x + 7 = 25\""
    )


@router.message(F.text == "üì∏ –†–µ—à–∏—Ç—å –ø–æ —Ñ–æ—Ç–æ")
async def handle_choose_photo(message: Message):
    await message.answer(
        "–ü—Ä–∏—à–ª–∏—Ç–µ —Ñ–æ—Ç–æ —Å –∑–∞–¥–∞–Ω–∏–µ–º (—á—ë—Ç–∫–æ–µ, –±–µ–∑ –±–ª–∏–∫–æ–≤)."
    )


@router.message(Command("help"))
async def cmd_help(message: Message):
    """–ö–æ—Ä–æ—Ç–∫–∞—è —Å–ø—Ä–∞–≤–∫–∞ –±–µ–∑ —É–ø–æ–º–∏–Ω–∞–Ω–∏–π –ª–∏–º–∏—Ç–æ–≤/—Ñ–æ—Ä–º–∞—Ç–æ–≤."""
    help_text = (
        "üìñ –ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è:\n\n"
        "1) –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç –∑–∞–¥–∞–Ω–∏—è ‚Äî —è –æ–ø—Ä–µ–¥–µ–ª—é –ø—Ä–µ–¥–º–µ—Ç –∏ –ø—Ä–µ–¥–ª–æ–∂—É —Ä–µ—à–µ–Ω–∏–µ.\n"
        "2) –ò–ª–∏ –ø—Ä–∏—à–ª–∏—Ç–µ —Ñ–æ—Ç–æ –∑–∞–¥–∞–Ω–∏—è ‚Äî –≤—ã–¥–µ–ª—é —É—Å–ª–æ–≤–∏–µ –∏ —Ä–µ—à—É.\n\n"
        "–ö–æ–º–∞–Ω–¥—ã:\n"
        "‚Ä¢ /start - –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É\n"
        "‚Ä¢ /help - —ç—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞\n"
        "‚Ä¢ /cancel_subscription - –æ—Ç–º–µ–Ω–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É\n"
        "‚Ä¢ /stats - —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö\n"
        "‚Ä¢ /cleanup - –æ—á–∏—Å—Ç–∏—Ç—å —Å—Ç–∞—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ\n\n"
        "–ü—Ä–∏–º–µ—Ä—ã:\n"
        "‚Ä¢ –†–µ—à–∏ —É—Ä–∞–≤–Ω–µ–Ω–∏–µ: 3x + 7 = 25\n"
        "‚Ä¢ –§–∏–∑–∏–∫–∞: —Ç–µ–ª–æ 2 –∫–≥ –¥–≤–∏–∂–µ—Ç—Å—è —Å —É—Å–∫–æ—Ä–µ–Ω–∏–µ–º 3 –º/—Å¬≤. –ù–∞–π–¥–∏ —Å–∏–ª—É\n"
        "‚Ä¢ –•–∏–º–∏—è: —É—Ä–∞–≤–Ω—è–π —Ä–µ–∞–∫—Ü–∏—é Fe + O‚ÇÇ ‚Üí Fe‚ÇÇO‚ÇÉ\n"
    )
    await message.answer(help_text, reply_markup=WELCOME_KEYBOARD)


@router.message(Command("cancel_subscription"))
async def cmd_cancel_subscription(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã –æ—Ç–º–µ–Ω—ã –ø–æ–¥–ø–∏—Å–∫–∏"""
    user_id = message.from_user.id
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ—Ç–º–µ–Ω—ã
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚úÖ –î–∞, –æ—Ç–º–µ–Ω–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", callback_data="confirm_cancel")],
        [InlineKeyboardButton(text="‚ùå –ù–µ—Ç, –æ—Å—Ç–∞–≤–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", callback_data="keep_subscription")]
    ])
    
    cancel_text = (
        "üîÑ –û—Ç–º–µ–Ω–∞ –ø–æ–¥–ø–∏—Å–∫–∏\n\n"
        "–í—ã –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Ö–æ—Ç–∏—Ç–µ –æ—Ç–º–µ–Ω–∏—Ç—å VIP-–ø–æ–¥–ø–∏—Å–∫—É?\n\n"
        "‚ö†Ô∏è –ü–æ—Å–ª–µ –æ—Ç–º–µ–Ω—ã –≤—ã –ø–æ—Ç–µ—Ä—è–µ—Ç–µ:\n"
        "‚Ä¢ ‚ö° –ú–≥–Ω–æ–≤–µ–Ω–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã\n"
        "‚Ä¢ üéØ –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ –æ–±—ä—è—Å–Ω–µ–Ω–∏—è\n"
        "‚Ä¢ üìä –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É\n"
        "‚Ä¢ üî• –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω—É—é –ø–æ–¥–¥–µ—Ä–∂–∫—É\n\n"
        "üí° *–ë–∞–∑–æ–≤—ã–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –æ—Å—Ç–∞–Ω–µ—Ç—Å—è –¥–æ—Å—Ç—É–ø–Ω—ã–º*"
    )
    
    await message.answer(cancel_text, reply_markup=keyboard)


@router.callback_query(F.data == "confirm_cancel")
async def confirm_cancel_subscription(callback: CallbackQuery):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ—Ç–º–µ–Ω—ã –ø–æ–¥–ø–∏—Å–∫–∏"""
    await callback.answer("–ü–æ–¥–ø–∏—Å–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞", show_alert=True)
    
    try:
        await callback.message.edit_reply_markup(reply_markup=None)
    except Exception as e:
        logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–±—Ä–∞—Ç—å inline-–∫–Ω–æ–ø–∫–∏: {e}")
    
    # –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ª–æ–≥–∏–∫–∞ –æ—Ç–º–µ–Ω—ã –ø–æ–¥–ø–∏—Å–∫–∏ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    # –ü–æ–∫–∞ –ø—Ä–æ—Å—Ç–æ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    await callback.message.answer(
        "‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ç–º–µ–Ω–µ–Ω–∞!\n\n"
        "–°–ø–∞—Å–∏–±–æ, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞–ª–∏—Å—å –Ω–∞—à–∏–º —Å–µ—Ä–≤–∏—Å–æ–º! üôè\n"
        "–ë–∞–∑–æ–≤—ã–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –æ—Å—Ç–∞–µ—Ç—Å—è –¥–æ—Å—Ç—É–ø–Ω—ã–º.\n\n"
        "–ï—Å–ª–∏ –ø–µ—Ä–µ–¥—É–º–∞–µ—Ç–µ, –ø—Ä–æ—Å—Ç–æ –Ω–∞–∂–º–∏—Ç–µ /start –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏! üöÄ",
    )


@router.callback_query(F.data == "keep_subscription")
async def keep_subscription(callback: CallbackQuery):
    """–û—Ç–º–µ–Ω–∞ –æ—Ç–º–µ–Ω—ã –ø–æ–¥–ø–∏—Å–∫–∏"""
    await callback.answer("–ü–æ–¥–ø–∏—Å–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞", show_alert=False)
    
    try:
        await callback.message.edit_reply_markup(reply_markup=None)
    except Exception as e:
        logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–±—Ä–∞—Ç—å inline-–∫–Ω–æ–ø–∫–∏: {e}")
    
    await callback.message.answer(
        "‚úÖ –û—Ç–ª–∏—á–Ω–æ! –ü–æ–¥–ø–∏—Å–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞!\n\n"
        "–ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –≤—Å–µ–º–∏ VIP-–≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è–º–∏! üöÄ\n"
        "–°–ø–∞—Å–∏–±–æ –∑–∞ –¥–æ–≤–µ—Ä–∏–µ! üíé",
    )


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ñ–æ—Ç–æ —Å —Ä–µ–∞–ª—å–Ω—ã–º LLM
@router.message(F.photo)
async def handle_photo(message: Message):
    user_id = message.from_user.id
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏
    processing_msg = await message.answer("üì∏ –§–æ—Ç–æ –ø–æ–ª—É—á–µ–Ω–æ. –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –∑–∞–¥–∞–Ω–∏–µ‚Ä¶")
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Ñ–æ—Ç–æ
        photo = message.photo[-1]  # –ë–µ—Ä–µ–º —Å–∞–º–æ–µ –±–æ–ª—å—à–æ–µ —Ñ–æ—Ç–æ
        file = await message.bot.get_file(photo.file_id)
        image_bytes = await message.bot.download_file(file.file_path)
        
        # –°–æ–∑–¥–∞–µ–º –∏–ª–∏ –ø–æ–ª—É—á–∞–µ–º ID –¥–∏–∞–ª–æ–≥–∞
        conversation_id = f"user_{user_id}_main"
        
        # –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–∏–∞–ª–æ–≥–∞
        conversation_context = await db_repo.get_conversation_context(user_id, conversation_id)
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—Ä–µ–¥–º–µ—Ç (–ø–æ–∫–∞ –±–µ–∑ –ø–æ–¥—Å–∫–∞–∑–∫–∏)
        subject, confidence = detect_subject(message.caption or "")
        subject_emoji = get_subject_emoji(subject)
        
        # –†–µ—à–∞–µ–º –∑–∞–¥–∞—á—É —Å –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º
        result = await llm_client.solve_image(image_bytes.read(), subject, conversation_context)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç
        photo_description = f"[–§–æ—Ç–æ —Å –∑–∞–¥–∞–Ω–∏–µ–º] {message.caption or ''}"
        await db_repo.save_message(user_id, conversation_id, "user", photo_description)
        await db_repo.save_message(user_id, conversation_id, "assistant", result['response'])
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å –≤ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        await db_repo.save_request(user_id, photo_description, "image", subject, result['response'])
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –∫–∞–∫ –µ—Å—Ç—å
        await processing_msg.delete()
        await message.answer(result['response'])
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–æ—Ç–æ: {e}")
        await processing_msg.edit_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–æ—Ç–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–∞ —Å —Ä–µ–∞–ª—å–Ω—ã–º LLM
@router.message(F.text)
async def handle_text(message: Message):
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ text –Ω–µ None
    if not message.text:
        return
    
    text = message.text.strip()
    if not text:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç –∑–∞–¥–∞–Ω–∏—è –∏–ª–∏ —Ñ–æ—Ç–æ.")
        return

    if text in {"üìù –†–µ—à–∏—Ç—å —Ç–µ–∫—Å—Ç–æ–º", "üì∏ –†–µ—à–∏—Ç—å –ø–æ —Ñ–æ—Ç–æ"}:
        return  # —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–º–∏ —Ö–µ–Ω–¥–ª–µ—Ä–∞–º–∏

    user_id = message.from_user.id
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏
    processing_msg = await message.answer("üìù –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –∑–∞–¥–∞–Ω–∏–µ‚Ä¶")
    
    try:
        # –°–æ–∑–¥–∞–µ–º –∏–ª–∏ –ø–æ–ª—É—á–∞–µ–º ID –¥–∏–∞–ª–æ–≥–∞
        conversation_id = f"user_{user_id}_main"
        
        # –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–∏–∞–ª–æ–≥–∞
        conversation_context = await db_repo.get_conversation_context(user_id, conversation_id)
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—Ä–µ–¥–º–µ—Ç
        subject, confidence = detect_subject(text)
        subject_emoji = get_subject_emoji(subject)
        
        # –†–µ—à–∞–µ–º –∑–∞–¥–∞—á—É —Å –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º
        result = await llm_client.solve_text(text, subject, conversation_context)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç
        await db_repo.save_message(user_id, conversation_id, "user", text)
        await db_repo.save_message(user_id, conversation_id, "assistant", result['response'])
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å –≤ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        await db_repo.save_request(user_id, text, "text", subject, result['response'])
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –∫–∞–∫ –µ—Å—Ç—å
        await processing_msg.delete()
        await message.answer(result['response'])
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç–µ–∫—Å—Ç–∞: {e}")
        await processing_msg.edit_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–¥–∞–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")


@router.message(Command("stats"))
async def cmd_stats(message: Message):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    try:
        stats = await db_repo.get_database_stats()
        
        stats_text = (
            "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö:\n\n"
            f"üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏: {stats['users_count']}\n"
            f"üìù –ó–∞–ø—Ä–æ—Å—ã: {stats['requests_count']}\n"
            f"üí¨ –°–æ–æ–±—â–µ–Ω–∏—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞: {stats['conversation_context_count']}\n"
            f"üíé –ü–æ–¥–ø–∏—Å–∫–∏: {stats['subscriptions_count']}\n\n"
            f"üíæ –†–∞–∑–º–µ—Ä –±–∞–∑—ã: {stats['database_size_mb']} –ú–ë\n\n"
            f"üóëÔ∏è –°—Ç–∞—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ:\n"
            f"‚Ä¢ –ö–æ–Ω—Ç–µ–∫—Å—Ç —Å—Ç–∞—Ä—à–µ 7 –¥–Ω–µ–π: {stats['old_context_messages']}\n"
            f"‚Ä¢ –ó–∞–ø—Ä–æ—Å—ã —Å—Ç–∞—Ä—à–µ 30 –¥–Ω–µ–π: {stats['old_requests']}\n\n"
            "üí° –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /cleanup –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ —Å—Ç–∞—Ä—ã—Ö –¥–∞–Ω–Ω—ã—Ö"
        )
        
        await message.answer(stats_text)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏")


@router.message(Command("cleanup"))
async def cmd_cleanup(message: Message):
    """–û—á–∏—â–∞–µ—Ç —Å—Ç–∞—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ"""
    try:
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –æ—á–∏—Å—Ç–∫–∏
        cleanup_msg = await message.answer("üßπ –ù–∞—á–∏–Ω–∞—é –æ—á–∏—Å—Ç–∫—É —Å—Ç–∞—Ä—ã—Ö –¥–∞–Ω–Ω—ã—Ö...")
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º –æ—á–∏—Å—Ç–∫—É
        result = await db_repo.cleanup_old_data()
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        total_deleted = sum(result.values())
        
        cleanup_result = (
            "‚úÖ –û—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n\n"
            f"üóëÔ∏è –£–¥–∞–ª–µ–Ω–æ –∑–∞–ø–∏—Å–µ–π:\n"
            f"‚Ä¢ –°–æ–æ–±—â–µ–Ω–∏—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞: {result['context_messages_deleted']}\n"
            f"‚Ä¢ –°—Ç–∞—Ä—ã–µ –∑–∞–ø—Ä–æ—Å—ã: {result['old_requests_deleted']}\n"
            f"‚Ä¢ –ù–µ–∞–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏: {result['inactive_users_deleted']}\n"
            f"‚Ä¢ –ò—Å—Ç–µ–∫—à–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏: {result['expired_subscriptions_deleted']}\n\n"
            f"üìä –í—Å–µ–≥–æ —É–¥–∞–ª–µ–Ω–æ: {total_deleted} –∑–∞–ø–∏—Å–µ–π"
        )
        
        await cleanup_msg.edit_text(cleanup_result)
        
        # –ï—Å–ª–∏ —É–¥–∞–ª–∏–ª–∏ –º–Ω–æ–≥–æ –¥–∞–Ω–Ω—ã—Ö, –¥–µ–ª–∞–µ–º VACUUM
        if total_deleted > 50:
            vacuum_msg = await message.answer("üîß –û–ø—Ç–∏–º–∏–∑–∏—Ä—É—é –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö...")
            await db_repo.vacuum_database()
            await vacuum_msg.edit_text("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–∞!")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –¥–∞–Ω–Ω—ã—Ö")
